*tomux.txt*            A minimalistic plugin for sending text to a tmux session.

Author:              Martin Roa Villescas

===============================================================================
USAGE                                                               *tomux-usage*

Configure the tmux socket name and target pane in your configuration file, for 
example:
>
  let b:tomux_config = {"socket_name": "default", "target_pane": "{right-of}"}
<
tomux exposes two <Plug> mappings to send motions and selections:

  <Plug>TomuxMotionSend		Send {count}{motion}.
  <Plug>TomuxVisualSend		Send {visual} text.

You need to map these in your configuration file, for example:
>
  nmap <buffer> s <Plug>TomuxMotionSend
  xmap <buffer> s <Plug>TomuxVisualSend
<
To send "a" paragraph, type `sap` in normal mode, or alternatively, you 
can first select the "a" paragraph with `vap` and then send it with `s`.

A few useful text-objects/motions that you can use with the `s` operator include:

- `sap` -> "a" paragraph
- `s_`  -> the current line
- `sj`  -> the current line and the one below

Any of these operations can be preceded by a {count}.

You can use the mapping below to send lines with (the more vim-oriented way) `ss` 
>
  omap s _
<
You can also use the `s` operator together with custom text-objects. For example,
here is the definition of a custom text-object that selects the entire document:
>
  " Custom 'inner document' text object (from first line to last)
  onoremap <silent> id :<c-u>normal! ggVG<cr>
  xnoremap <silent> id :<c-u>normal! ggVG<cr>
<
Now you can use `sid` to send the entire buffer.

===============================================================================
CLIPBOARD                                                       *tomux-clipboard*

Sending code to a REPL is a common use case of tomux. By default, tomux uses
an intermediary file to communicate with tmux. One of the drawbacks of using
this approach is that every character sent is echoed, which can be annoying if
you are sending large portions of text.

To solve this, tomux provides an option to communicate over the clipboard
instead. Some programming languages have a method to paste text from the
clipboard to the REPL. To enable this option, assign a string to
`b:tomux_clipboard_paste`. This string should be the method that pastes and
runs the content of the clipboard quietly in your given programming language.
For example, to enable this functionality with ipython you could define: 
>
  let b:tomux_clipboard_paste = "paste -q"
<
To enable this in a Julia REPL use:
>
  let b:tomux_clipboard_paste = "include_string(Main, clipboard())">
<

===============================================================================
OPTIONS                                                           *tomux-options*

b:tomux_config                                                    *b:tomux_config*

        tmux socket name and target pane. For more information on these options 
        and their possible values see the tmux {manual}{1}.

        Default: {"socket_name": "default", "target_pane": "{right-of}"}

                {1} http://man.openbsd.org/OpenBSD-current/man1/tmux.1#_last__2

b:tomux_clipboard_paste                                 *b:tomux_clipboard_paste*

        If defined, the text involved in an operation is first yanked to the
        clipboard and then the string assigned to this variable is sent to tmux
        using an intermediary file.

        Default: empty

 g:tomux_paste_file                                          *g:tomux_paste_file*

	Path to an intermediary file that is used to transfer data to tmux.
	WARNING: this file is not removed by tomux.

	Default: "$HOME/.tomux_paste"

vim:tw=78:ts=8:ft=help:norl:
